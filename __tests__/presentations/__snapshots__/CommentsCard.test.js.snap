// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommentsCard renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <div>
    <Uncontrolled(Panel)
      bsSize="small"
      style={
        Object {
          "height": 200,
          "margin": 5,
          "maxWidth": 400,
        }
      }
    >
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        test
      </PanelHeading>
      <PanelBody
        bsClass="panel"
        collapsible={false}
        style={
          Object {
            "display": "flex",
            "flexWrap": "wrap",
          }
        }
      >
        Email:
         
        test@test
         
        test
      </PanelBody>
    </Uncontrolled(Panel)>
  </div>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Uncontrolled(Panel)
        bsSize="small"
        style={
          Object {
            "height": 200,
            "margin": 5,
            "maxWidth": 400,
          }
        }
      >
        <PanelHeading
          bsClass="panel"
          componentClass="div"
        >
          test
        </PanelHeading>
        <PanelBody
          bsClass="panel"
          collapsible={false}
          style={
            Object {
              "display": "flex",
              "flexWrap": "wrap",
            }
          }
        >
          Email:
           
          test@test
           
          test
        </PanelBody>
      </Uncontrolled(Panel)>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsSize": "small",
        "children": Array [
          <PanelHeading
            bsClass="panel"
            componentClass="div"
          >
            test
          </PanelHeading>,
          <PanelBody
            bsClass="panel"
            collapsible={false}
            style={
              Object {
                "display": "flex",
                "flexWrap": "wrap",
              }
            }
          >
            Email:
             
            test@test
             
            test
          </PanelBody>,
        ],
        "style": Object {
          "height": 200,
          "margin": 5,
          "maxWidth": 400,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "panel",
            "children": "test",
            "componentClass": "div",
          },
          "ref": null,
          "rendered": "test",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "panel",
            "children": Array [
              "Email:",
              " ",
              "test@test",
              " ",
              "test",
            ],
            "collapsible": false,
            "style": Object {
              "display": "flex",
              "flexWrap": "wrap",
            },
          },
          "ref": null,
          "rendered": Array [
            "Email:",
            " ",
            "test@test",
            " ",
            "test",
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Uncontrolled(Panel)
          bsSize="small"
          style={
            Object {
              "height": 200,
              "margin": 5,
              "maxWidth": 400,
            }
          }
        >
          <PanelHeading
            bsClass="panel"
            componentClass="div"
          >
            test
          </PanelHeading>
          <PanelBody
            bsClass="panel"
            collapsible={false}
            style={
              Object {
                "display": "flex",
                "flexWrap": "wrap",
              }
            }
          >
            Email:
             
            test@test
             
            test
          </PanelBody>
        </Uncontrolled(Panel)>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsSize": "small",
          "children": Array [
            <PanelHeading
              bsClass="panel"
              componentClass="div"
            >
              test
            </PanelHeading>,
            <PanelBody
              bsClass="panel"
              collapsible={false}
              style={
                Object {
                  "display": "flex",
                  "flexWrap": "wrap",
                }
              }
            >
              Email:
               
              test@test
               
              test
            </PanelBody>,
          ],
          "style": Object {
            "height": 200,
            "margin": 5,
            "maxWidth": 400,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "panel",
              "children": "test",
              "componentClass": "div",
            },
            "ref": null,
            "rendered": "test",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "panel",
              "children": Array [
                "Email:",
                " ",
                "test@test",
                " ",
                "test",
              ],
              "collapsible": false,
              "style": Object {
                "display": "flex",
                "flexWrap": "wrap",
              },
            },
            "ref": null,
            "rendered": Array [
              "Email:",
              " ",
              "test@test",
              " ",
              "test",
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
